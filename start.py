import gradio as gr
import time
from langfuse import Langfuse
from langfuse.decorators import observe
from smolagents import OpenAIServerModel, ToolCallingAgent
import git
import os

langfuse = Langfuse(
    public_key="pk-lf-1e88a751-e94e-411a-8df4-6f351be3b82b",  
    secret_key="sk-lf-7fd9c71f-d0dc-4ae6-87a9-a6603a1afe1b",  
    host="https://cloud.langfuse.com"  
)

model = OpenAIServerModel(
    model_id="local-model",
    api_base="http://localhost:1234/v1",
    api_key="not-needed",
)

agent = ToolCallingAgent(
    name="LocalLLMAgent",
    model=model,
    tools=[],
)

messages = []

def process_mcp_context(context_data):
    if not context_data:
        return ""
    if "context" in context_data and isinstance(context_data["context"], dict):
        context_str = "–ö–æ–Ω—Ç–µ–∫—Å—Ç (MCP):\n"
        for key, value in context_data["context"].items():
            context_str += f"- {key}: {value}\n"
        return context_str
    else:
        print("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É MCP.")
        return ""

def get_files_and_folders(repo_path, base_path="", level=0):
    files_and_folders = []
    for item in os.listdir(os.path.join(repo_path, base_path)):
        if item == ".git":
            continue
        full_path = os.path.join(base_path, item)
        indent = "  " * level
        if os.path.isfile(os.path.join(repo_path, full_path)):
            files_and_folders.append(f"{indent}üìÑ {full_path}")
        elif os.path.isdir(os.path.join(repo_path, full_path)):
            files_and_folders.append(f"{indent}üìÅ {full_path}")
            files_and_folders.extend(get_files_and_folders(repo_path, full_path, level + 1))
    return files_and_folders

def get_files_content(repo_path, base_path=""):
    files_content = []
    for item in os.listdir(os.path.join(repo_path, base_path)):
        if item == ".git":
            continue
        full_path = os.path.join(base_path, item)
        file_path = os.path.join(repo_path, full_path)
        if os.path.isfile(file_path):
            if is_text_file(file_path):
                with open(file_path, "r", encoding="utf-8", errors="ignore") as file:
                    content = file.read()
                    files_content.append({
                        "path": full_path,
                        "content": content
                    })
            else:
                print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª: {full_path}")
        elif os.path.isdir(file_path):
            files_content.extend(get_files_content(repo_path, full_path))
    return files_content

def is_text_file(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            file.read(1024)
        return True
    except UnicodeDecodeError:
        return False

def clone_and_analyze_repo(repo_url):
    repo_name = repo_url.split("/")[-1].replace(".git", "")
    local_path = f"./{repo_name}"
    if os.path.exists(local_path):
        print("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
    else:
        print("–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
        try:
            repo = git.Repo.clone_from(repo_url, local_path)
            print("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω!")
        except git.exc.GitCommandError as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}"
    files_and_folders = get_files_and_folders(local_path)
    files_content = get_files_content(local_path)
    report = "–°–ü–ò–°–û–ö –§–ê–ô–õ–û–í –ò –ü–ê–ü–û–ö:\n"
    report += "\n".join(files_and_folders)
    report += "\n–°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–û–í:\n"
    for file in files_content:
        report += f"\n{'='*50}\n–§–∞–π–ª: {file['path']}\n{'='*50}\n"
        report += file['content']
        report += f"\n{'-'*50}\n"
    return report

@observe
def generate_response(github_link, user_input, system_prompt=None, temperature=0.7, max_tokens=512, top_p=0.9, mcp_context=None):
    global messages
    mcp_context_str = process_mcp_context(mcp_context)
    if mcp_context_str:
        user_input = f"{mcp_context_str}\n{user_input}"
    if github_link.strip():
        try:
            repo_data = clone_and_analyze_repo(github_link)
            user_input = f"–°—Å—ã–ª–∫–∞ –Ω–∞ GitHub: {github_link}\n{repo_data}\n{user_input}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {str(e)}"
    if system_prompt:
        messages = [{"role": "system", "content": system_prompt}] + [
            msg for msg in messages if msg["role"] != "system"
        ]
    messages.append({"role": "user", "content": user_input})
    start_time = time.time()
    try:
        response = agent.run(user_input)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
    generation_time = time.time() - start_time
    if hasattr(response, 'text'):
        assistant_reply = response.text
    elif hasattr(response, 'content'):
        assistant_reply = response.content
    elif isinstance(response, dict):
        assistant_reply = response.get("answer", "–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –ø—É—Å—Ç.")
    else:
        assistant_reply = str(response)
    messages.append({"role": "assistant", "content": assistant_reply})
    trace = langfuse.trace(name="smolagents-example")
    trace.generation(
        name="chat-completion",
        input=user_input,
        output=assistant_reply,
        metadata={
            "generation_time": generation_time,
            "temperature": temperature,
            "max_tokens": max_tokens,
            "top_p": top_p,
            "messages": messages
        }
    )
    return f"–ú–æ–¥–µ–ª—å ({generation_time:.2f} —Å–µ–∫): {assistant_reply}"

def new_chat():
    global messages
    messages = []
    return None

with gr.Blocks(css="""
    body { background-color: #1E1E1E; color: #5E5E61; }
    .sidebar { background-color: #2E2D31; color: white; padding: 35px; border-radius: 4px; }
    .nav-button {
        background-color: transparent;
        color: white;
        border: none;
        padding: 5px;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 5px;
    }
    .nav-button img { transition: transform 0.3s ease; }
    .nav-button:hover { background-color: #4a494e; }
    .nav-button:hover img { transform: scale(1.1); }
    .nav-button:hover span { color: white; }
""") as demo:
    with gr.Row():
        with gr.Sidebar(elem_classes="sidebar"):
            gr.HTML("""
                <div style="display: flex; align-items: center; gap: 10px;">
                    <svg width="43" height="43" viewBox="0 0 43 43" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g filter="url(#filter0_d_8_98)">
                            <path d="M19.979 12.1198L21.4276 17.0453H9.87437L11.3593 12.1198H19.979Z" fill="white"/>
                            <path d="M12.5182 17.9507L17.4799 19.1459L11.7214 29.1418L8.20833 25.4114L12.5182 17.9507Z" fill="white"/>
                            <path d="M13.8219 27.3309L17.335 23.6006L23.1297 33.5965L18.1318 34.7917L13.8219 27.3309Z" fill="white"/>
                            <path d="M31.2062 30.844H22.5866L21.1379 25.9547H32.6912" fill="white"/>
                            <path d="M34.357 17.5524L30.0472 25.0493L25.0855 23.8541L30.844 13.8582" fill="white"/>
                            <path d="M28.7434 15.6691L25.2303 19.3994L19.4356 9.36727L24.4335 8.20833L28.7434 15.6691Z" fill="white"/>
                        </g>
                        <defs>
                            <filter id="filter0_d_8_98" x="-1.1" y="-1.1" width="45.2" height="45.2" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                                <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                                <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
                                <feOffset/>
                                <feGaussianBlur stdDeviation="4.05"/>
                                <feComposite in2="hardAlpha" operator="out"/>
                                <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
                                <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_8_98"/>
                                <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_8_98" result="shape"/>
                            </filter>
                        </defs>
                    </svg>
                    <div style="display: flex; flex-direction: column;">
                        <h1 style="margin: 0; font-size: 30px;">SPECIAL</h1>
                        <div style="display: flex; gap: 2px;">
                            <h1 style="margin: 0; font-size: 30px;">GIT</h1>
                            <h1 style="margin: 0; font-size: 30px; color: #ffffff54;">GPT</h1>
                        </div>
                    </div>
                </div>
            """)
            with gr.Column():
                new_chat_button = gr.Button(
                    "–ù–æ–≤—ã–π —á–∞—Ç",
                    elem_classes="nav-button",
                    variant="secondary"
                )
        with gr.Column(scale=3):
            chatbot = gr.Chatbot(label="–î–∏–∞–ª–æ–≥ —Å –º–æ–¥–µ–ª—å—é", type="messages")
            github_link = gr.Textbox(
                label="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ GitHub/GitLab",
                placeholder="https://github.com/example",
                elem_classes="input-field"
            )
            user_input = gr.Textbox(
                label="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...",
                elem_classes="input-field"
            )
            with gr.Accordion("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", open=False):
                temperature = gr.Slider(
                    minimum=0.0, maximum=1.0, value=0.7, step=0.1,
                    label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (Temperature)",
                    info="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–Ω–∏–∂–µ - –±–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–æ)"
                )
                max_tokens = gr.Slider(
                    minimum=16, maximum=40000, value=1024, step=16,
                    label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ (Max Tokens)",
                    info="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏"
                )
                top_p = gr.Slider(
                    minimum=0.0, maximum=1.0, value=0.9, step=0.1,
                    label="Top-P Sampling",
                    info="–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –∑–∞–¥–∞–Ω–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"
                )
            submit_button = gr.Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", elem_classes="submit-button")
    
    def update_chat(github_link, user_message, temperature, max_tokens, top_p, chat_history):
        global messages
        response = generate_response(
            github_link=github_link,
            user_input=user_message,
            system_prompt="–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï!!! "
                          "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –Ω–æ –æ—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –¢–û–õ–¨–ö–û –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–æ–≤ (–∫–æ–¥, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è). "
                          "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–∏—Ç–æ–≤ –∏–ª–∏ –∞–≤—Ç–æ—Ä–æ–≤). –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ–±–∑–æ—Ä –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: "
                          "1. **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞**: "
                          "- –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏. "
                          "- –£–∫–∞–∂–∏, –∫–∞–∫–∏–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥, —Ç–µ—Å—Ç—ã, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è). "
                          "2. **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ —Ñ–∞–π–ª–æ–≤**: "
                          "- –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏). "
                          "- –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –º–æ–¥—É–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–¥–µ–ª—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª–∞—Ö. "
                          "- –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, `.env`, `Dockerfile`, `package.json`), —É–∫–∞–∂–∏ –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ. "
                          "3. **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏**: "
                          "- –í—ã—è–≤–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫). "
                          "- –£–∫–∞–∂–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏, –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã). "
                          "- –û—Ç–º–µ—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `.gitignore`, `README.md`, —Ç–µ—Å—Ç–æ–≤). "
                          "4. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: "
                          "- –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∫–æ–¥–∞ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤. "
                          "- –£–∫–∞–∂–∏, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∏–ª–∏ —á–∞—Å—Ç–∏ –∫–æ–¥–∞ —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è. ",
            temperature=temperature,
            max_tokens=max_tokens,
            top_p=top_p
        )
        chat_history.append({"role": "user", "content": user_message})
        chat_history.append({"role": "assistant", "content": response})
        return "", "", temperature, max_tokens, top_p, chat_history
    
    new_chat_button.click(
        new_chat,
        inputs=[],
        outputs=[chatbot]
    )

    submit_button.click(
        update_chat,
        inputs=[github_link, user_input, temperature, max_tokens, top_p, chatbot],
        outputs=[github_link, user_input, temperature, max_tokens, top_p, chatbot]
    )

demo.launch(share=True)
